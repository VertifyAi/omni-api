/* eslint-disable @typescript-eslint/no-unused-vars */
import { RunnableConfig } from '@langchain/core/runnables';
import { StateGraph } from '@langchain/langgraph';
import { ConfigurationAnnotation, ensureConfiguration } from './configuration';
import { StateAnnotation, InputStateAnnotation } from './state';
import { formatDocs, getMessageText, loadChatModel } from './utils';
import { z } from 'zod';
import { makeRetriever } from './retrieval';
// Define the function that calls the model

const SearchQuery = z.object({
  query: z.string().describe('Search the indexed documents for a query.'),
});

const DepartmentInfo = z.object({
  name: z.string().describe('Nome do departamento respons√°vel'),
  contact: z.string().describe('Informa√ß√µes de contato do departamento'),
  description: z
    .string()
    .describe('Descri√ß√£o do motivo da transfer√™ncia para este departamento'),
});

async function generateQuery(
  state: typeof StateAnnotation.State,
  config?: RunnableConfig,
): Promise<typeof StateAnnotation.Update> {
  const messages = state.messages;
  
  // Get the last user message
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  let lastUserMessage: any = messages[messages.length - 1];
  for (let i = messages.length - 1; i >= 0; i--) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const msg = messages[i] as any;
    if (msg.role === 'user' || (msg.lc_kwargs && !msg.lc_kwargs.content?.includes('Obrigado'))) {
      lastUserMessage = msg;
      break;
    }
  }
  
  if (messages.length === 1 || !state.queries || state.queries.length === 0) {
    // It's the first user question. We will use the input directly to search.
    const humanInput = getMessageText(lastUserMessage);
    return { queries: [humanInput] };
  } else {
    const configuration = ensureConfiguration(config);
    // Feel free to customize the prompt, model, and other logic!
    const systemMessage = configuration.querySystemPromptTemplate
      .replace('{queries}', (state.queries || []).join('\n- '))
      .replace('{systemTime}', new Date().toISOString());

    const messageValue = [
      { role: 'system', content: systemMessage },
      lastUserMessage, // Usar apenas a √∫ltima mensagem do usu√°rio, n√£o o hist√≥rico completo
    ];
    const model = (
      await loadChatModel(configuration.responseModel)
    ).withStructuredOutput(SearchQuery);

    const generated = await model.invoke(messageValue);
    return {
      queries: [generated.query],
      // Garantir que todas as fun√ß√µes mantenham o estado do onboarding
      userInfo: {
        ...state.userInfo,
        onboardingCompleted: true,
      },
      conversationStep: 'main_conversation',
    };
  }
}

async function retrieve(
  state: typeof StateAnnotation.State,
  config: RunnableConfig,
): Promise<typeof StateAnnotation.Update> {
  const query = state.queries[state.queries.length - 1];
  const retriever = await makeRetriever(config);
  const response = await retriever.invoke(query);
  return { retrievedDocs: response };
}

async function determineDepartment(
  state: typeof StateAnnotation.State,
  config: RunnableConfig,
): Promise<typeof StateAnnotation.Update> {
  const configuration = ensureConfiguration(config);
  const model = (await loadChatModel('openai/gpt-4')).withStructuredOutput(
    DepartmentInfo,
  );

  console.log('determineDepartment - PROCESSANDO DETERMINA√á√ÉO DO DEPARTAMENTO', {
    state: state,
    config: config,
  });

  const messageValue = [
    {
      role: 'system',
      content: `Analise a conversa e determine qual departamento √© mais adequado para atender a solicita√ß√£o do usu√°rio.
      Considere o contexto da conversa e as informa√ß√µes dispon√≠veis para tomar a melhor decis√£o.
      Retorne o nome do departamento, informa√ß√µes de contato e uma descri√ß√£o clara do motivo da transfer√™ncia.`,
    },
    ...state.messages,
  ];

  const departmentInfo = await model.invoke(messageValue);
  return { responsibleDepartment: departmentInfo };
}

async function handleIntroduction(
  state: typeof StateAnnotation.State,
): Promise<typeof StateAnnotation.Update> {
  const userInfo = state.userInfo || {};
  
  // ‚úÖ VERIFICA√á√ÉO CR√çTICA: Se o userInfo j√° indica onboarding completo, n√£o processamos mais esta fun√ß√£o
  if (userInfo.onboardingCompleted && userInfo.name && userInfo.email) {
    // Retornamos explicitamente para o fluxo principal, sem processar mais nada
    return {
      conversationStep: 'main_conversation',
      userInfo: {
        ...userInfo,
        onboardingCompleted: true,
      },
    };
  }
  
  // Em vez de confiar no conversationStep, vamos analisar a √∫ltima mensagem do assistente
  // para determinar em que etapa estamos
  
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const lastUserMessage: any = state.messages[state.messages.length - 1];
  const userMessageText = getMessageText(lastUserMessage);

  // Encontre a √∫ltima mensagem do assistente, se existir
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  let lastAssistantMessage: any = null;
  let lastAssistantMessageText = '';
  
  // CORRE√á√ÉO: Melhoria na detec√ß√£o de mensagens do assistente
  for (let i = state.messages.length - 2; i >= 0; i--) {
    const msg = state.messages[i];
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const msgAny = msg as any;
    
    // Verificamos m√∫ltiplos padr√µes poss√≠veis de mensagens do assistente
    if (
      msgAny.role === 'assistant' || 
      (msgAny.lc_kwargs && msgAny.lc_kwargs.content && msgAny.content && !msgAny.content.includes('@'))
    ) {
      lastAssistantMessage = msg;
      lastAssistantMessageText = getMessageText(msg);
      
      break;
    }
  }

  // VERIFICA√á√ÉO ESPECIAL PARA √öLTIMA MENSAGEM DO ASSISTENTE
  // Se a √∫ltima mensagem do assistente cont√©m texto de "obrigado" e "diga com o que voc√™ precisa de ajuda"
  // Consideramos que estamos na etapa final do onboarding
  if (
    lastAssistantMessageText.includes('precisa de ajuda') && 
    lastAssistantMessageText.includes('Obrigado')
  ) {
    return {
      conversationStep: 'main_conversation',
      userInfo: {
        ...userInfo,
        onboardingCompleted: true,
      },
    };
  }

  // Padr√µes de "pular" ou "n√£o responder"
  const skipPatterns = [
    'pular',
    'n√£o quero',
    'n√£o vou',
    'n√£o preciso',
    'n√£o tenho',
    'n√£o tenho interesse',
    'n√£o quero informar',
    'n√£o vou informar',
    'n√£o quero dar',
    'n√£o vou dar',
    'pode pular',
    'pode ignorar',
    'n√£o quero responder',
    'n√£o vou responder',
    'n√£o preciso informar',
    'n√£o preciso responder',
  ];

  const isSkipping = skipPatterns.some((pattern) =>
    userMessageText.toLowerCase().includes(pattern),
  );

  // ESTRAT√âGIA: Determinamos a etapa da conversa baseada no conte√∫do real das mensagens
  
  // CASO 1: Primeira mensagem do usu√°rio - inicie o fluxo
  if (state.messages.length === 1) {
    return {
      messages: [
        {
          role: 'assistant',
          content:
            'Ol√°! Sou o assistente virtual da empresa. Antes de come√ßarmos, preciso de algumas informa√ß√µes suas.\n\nPoderia me informar seu nome completo?',
        },
      ],
      userInfo: {
        name: null,
        email: null,
        onboardingCompleted: false,
      },
      conversationStep: 'asking_name',
    };
  }
  
  // IMPORTANTE: Verifique o email ANTES do nome para evitar confus√£o
  // CASO 2: Verificamos se a √∫ltima mensagem do assistente est√° pedindo o email
  if (lastAssistantMessageText.includes('email profissional')) {
    if (isSkipping) {
      console.log('Usu√°rio tentou pular a etapa de email');
      return {
        messages: [
          {
            role: 'assistant',
            content:
              'Compreendo sua preocupa√ß√£o. O email profissional √© importante para que possamos manter um canal de comunica√ß√£o direto e enviar atualiza√ß√µes relevantes sobre seu atendimento. Voc√™ poderia me fornecer um email para contato?',
          },
        ],
        conversationStep: 'asking_email',
      };
    }
    
    // Obtemos o nome j√° armazenado
    const userName = userInfo.name;
    
    // Marcamos explicitamente como onboarding completo
    const completedUserInfo = {
      ...userInfo,
      email: userMessageText,
      onboardingCompleted: true,
    };
    
    return {
      userInfo: completedUserInfo,
      messages: [
        {
          role: 'assistant',
          content:
            `Obrigado ${userName}! Agora me diga com o que voc√™ precisa de ajuda, para que eu possa te direcionar melhor. üòä`,
        },
      ],
      conversationStep: 'main_conversation',
    };
  }
  
  // CASO 3: Verificamos se a √∫ltima mensagem do assistente est√° pedindo o nome
  if (lastAssistantMessageText.includes('nome completo')) {
    if (isSkipping) {
      console.log('Usu√°rio tentou pular a etapa de nome');
      return {
        messages: [
          {
            role: 'assistant',
            content:
              'Entendo sua preocupa√ß√£o com a privacidade. No entanto, para melhor atend√™-lo e garantir um servi√ßo personalizado, preciso do seu nome. Voc√™ poderia reconsiderar e me informar como gostaria de ser chamado?',
          },
        ],
        conversationStep: 'asking_name',
      };
    }

    return {
      userInfo: {
        ...userInfo,
        name: userMessageText,
      },
      messages: [
        {
          role: 'assistant',
          content: `Obrigado, ${userMessageText}! Agora, poderia me informar seu email profissional?`,
        },
      ],
      conversationStep: 'asking_email',
    };
  }
  
  // CASO 4: O usu√°rio j√° finalizou o onboarding (verificamos pelo userInfo)
  if (userInfo.onboardingCompleted && userInfo.name && userInfo.email) {
    return {
      userInfo: {
        ...userInfo,  // Preservar o userInfo existente
        onboardingCompleted: true,
      },
      conversationStep: 'main_conversation',
    };
  }
  
  // CASO 5: Alternativa - se temos o nome e o usu√°rio forneceu provavelmente o email
  if (userInfo.name && !userInfo.email && state.messages.length >= 5) {
    
    const userName = userInfo.name;
    
    // Marcamos explicitamente como onboarding completo
    const completedUserInfo = {
      ...userInfo,
      email: userMessageText,
      onboardingCompleted: true,
    };
    
    return {
      userInfo: completedUserInfo,
      messages: [
        {
          role: 'assistant',
          content:
            `Obrigado ${userName}! Agora me diga com o que voc√™ precisa de ajuda, para que eu possa te direcionar melhor. üòä`,
        },
      ],
      conversationStep: 'main_conversation',
    };
  }
  
  // CASO 6: Alternativa - se o usu√°rio est√° na mensagem 3, provavelmente forneceu o nome
  if (!userInfo.name && state.messages.length === 3) {
    return {
      userInfo: {
        ...userInfo,
        name: userMessageText,
      },
      messages: [
        {
          role: 'assistant',
          content: `Obrigado, ${userMessageText}! Agora, poderia me informar seu email profissional?`,
        },
      ],
      conversationStep: 'asking_email',
    };
  }
  
  // CASO 7: Se j√° estamos na conversa principal, vamos manter assim
  if (state.conversationStep === 'main_conversation') {
    return {
      conversationStep: 'main_conversation',
      userInfo: {
        ...userInfo,
        onboardingCompleted: true,
      },
    };
  }
  
  // CASO 8: Fallback - algo n√£o est√° certo, vamos reiniciar o fluxo
  return {
    messages: [
      {
        role: 'assistant',
        content:
          'Parece que tivemos um problema com nosso fluxo de conversa. Vamos recome√ßar.\n\nPoderia me informar seu nome completo?',
      },
    ],
    userInfo: {
      name: null,
      email: null,
      onboardingCompleted: false,
    },
    conversationStep: 'asking_name',
  };
}

async function respond(
  state: typeof StateAnnotation.State,
  config: RunnableConfig,
): Promise<typeof StateAnnotation.Update> {
  // Se o onboarding n√£o estiver completo, n√£o processa a resposta
  const userInfo = state.userInfo || {};
  const conversationStep = state.conversationStep || 'initialization';
  
  // VERIFICA√á√ÉO ALTERNATIVA: Se n√£o temos o flag de onboarding, mas temos todas as informa√ß√µes necess√°rias,
  // consideramos o onboarding como completo
  if (!userInfo.onboardingCompleted && userInfo.name && userInfo.email) {
    userInfo.onboardingCompleted = true;
  }
  
  // Verifica√ß√µes mais robustas para garantir que estamos prontos para gerar uma resposta
  const isOnboardingComplete = Boolean(userInfo.onboardingCompleted);
  const hasName = Boolean(userInfo.name);
  const hasEmail = Boolean(userInfo.email);
  
  // IMPORTANTE: Verificamos se o onboarding est√° completo
  if (!isOnboardingComplete || !hasName || !hasEmail) {
    return {};
  }
  
  const configuration = ensureConfiguration(config);
  const model = await loadChatModel('openai/gpt-4');

  const retrievedDocs = formatDocs(state.retrievedDocs);
  const departmentInfo = state.responsibleDepartment;

  const { companyName, ticketId, clientId } = configuration;

  // IMPORTANTE: Adicionamos o prompt sistema mais espec√≠fico agora que o onboarding est√° conclu√≠do
  const systemPrompt = `${configuration.responseSystemPromptTemplate}
  
  Empresa: ${companyName}
  Ticket: ${ticketId}
  Cliente: ${clientId}
  
  Informa√ß√µes do usu√°rio:
  Nome: ${userInfo.name}
  Email: ${userInfo.email}
  
  Informa√ß√µes do departamento respons√°vel:
  ${
    departmentInfo
      ? `
  Departamento: ${departmentInfo.name}
  Contato: ${departmentInfo.contact}
  Motivo: ${departmentInfo.description}
  `
      : 'Nenhum departamento espec√≠fico identificado.'
  }`;

  const messageValue = [
    {
      role: 'system',
      content: systemPrompt,
    },
    { role: 'user', content: `Contexto relevante:\n${retrievedDocs}` },
    ...state.messages,
  ];

  const response = await model.invoke(messageValue);
  return { 
    messages: [response],
    conversationStep: 'main_conversation',
    userInfo: {
      ...userInfo,
      onboardingCompleted: true,
    }
  };
}

// Lay out the nodes and edges to define a graph
const builder = new StateGraph(
  {
    stateSchema: StateAnnotation,
    // The only input field is the user
    input: InputStateAnnotation,
  },
  ConfigurationAnnotation,
)
  .addNode('handleIntroduction', handleIntroduction)
  .addNode('generateQuery', generateQuery)
  .addNode('retrieve', retrieve)
  .addNode('determineDepartment', determineDepartment)
  .addNode('respond', respond)
  .addEdge('__start__', 'handleIntroduction')
  .addConditionalEdges('handleIntroduction', (state) => {
    // Agora vamos analisar tamb√©m o conte√∫do das mensagens para tomar decis√µes
    const typedState = state as unknown as typeof StateAnnotation.State;
    const userInfo = typedState.userInfo || {};
    
    // Verificamos explicitamente se o onboarding est√° completo no userInfo
    const isOnboardingComplete = Boolean(userInfo.onboardingCompleted);
    const hasName = Boolean(userInfo.name);
    const hasEmail = Boolean(userInfo.email);
    const inMainConversation = typedState.conversationStep === 'main_conversation';
    
    // Se qualquer uma destas condi√ß√µes for verdadeira, avan√ßamos para o fluxo principal
    // 1. O usu√°rio tem o flag onboardingCompleted e estamos na etapa main_conversation
    // 2. O usu√°rio tem o flag onboardingCompleted, nome e email preenchidos
    if (
      (isOnboardingComplete && inMainConversation) || 
      (isOnboardingComplete && hasName && hasEmail)
    ) {
      return 'generateQuery';
    }
    
    return [];
  })
  .addEdge('generateQuery', 'retrieve')
  .addEdge('retrieve', 'determineDepartment')
  .addEdge('determineDepartment', 'respond');

// Finally, we compile it!
// This compiles it into a graph you can invoke and deploy.
export const graph = builder.compile({
  interruptBefore: [], // if you want to update the state before calling the tools
  interruptAfter: [],
});

graph.name = 'Retrieval Graph'; // Customizes the name displayed in LangSmith
